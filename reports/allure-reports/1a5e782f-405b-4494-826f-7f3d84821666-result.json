{"name": "test_logout", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'reports/screenshot.png'", "trace": "self = <tests.login_test.TestLogin object at 0x0000024739516190>\n\n    def test_logout(self):\n        try:\n            # home page\n            driver = self.driver\n            home = HomePage(driver)\n            home.click_welcome_link()\n            home.click_logout_link()\n            x = driver.title\n>           assert x == 'abc' # OrangeHRM\nE           AssertionError: assert 'OrangeHRM' == 'abc'\nE             - abc\nE             + OrangeHRM\n\ntests\\login_test.py:26: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.login_test.TestLogin object at 0x0000024739516190>\n\n    def test_logout(self):\n        try:\n            # home page\n            driver = self.driver\n            home = HomePage(driver)\n            home.click_welcome_link()\n            home.click_logout_link()\n            x = driver.title\n            assert x == 'abc' # OrangeHRM\n        except AssertionError as error:\n            print(\"Assertion error occured\")\n            print(error)\n>           allure.attach.file(\"reports/screenshot.png\",\n                               name=\"screenshot m\",\n                               attachment_type=allure.attachment_type.PNG)\n\ntests\\login_test.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\Lib\\site-packages\\allure_pytest\\listener.py:240: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\nvenv\\Lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\Lib\\site-packages\\allure_commons\\logger.py:44: in report_attached_file\n    shutil.copy2(source, destination)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:436: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nsrc = 'reports/screenshot.png', dst = WindowsPath('C:/Users/moura/PycharmProjects/udemy/Automation_Framework/reports/allure-reports/8a32d0a4-3842-4939-ab4d-a9c29cf8b4f0-attachment.png')\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'reports/screenshot.png'\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:256: FileNotFoundError"}, "attachments": [{"name": "screenshot m", "source": "8a32d0a4-3842-4939-ab4d-a9c29cf8b4f0-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "e27ae9a5-64e1-4d1d-8278-75c70a37ee93-attachment.txt", "type": "text/plain"}], "start": 1679882785003, "stop": 1679882787909, "uuid": "d2b9dc26-57a4-452e-bd2b-b444c9b85ef4", "historyId": "606d9f046945fff19ea92d7b1a10f16b", "testCaseId": "e89a5a0e9aefe451ee262eba82370b01", "fullName": "tests.login_test.TestLogin#test_logout", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "login_test"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "26368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.login_test"}]}